Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

CODE 1:

class Solution 
{
    public int[] topKFrequent(int[] nums, int k) 
    {
        HashMap<Integer,Integer>mp= new HashMap<>();
        List<Integer>[] arr= new List[nums.length+1];
        int[]ans= new int[k];
        int t=0;

        for(int i=0; i<nums.length; i++)
            mp.put(nums[i], mp.getOrDefault(nums[i], 0)+1);
        
        for(int key : mp.keySet())
        {
            int val= mp.get(key);
            if(arr[val]==null)
                arr[val]= new ArrayList<>();
            arr[val].add(key);
        }
        
        for(int i=arr.length-1; i>=0; i--)
        {
            if(arr[i]!=null)
            {
                for(int j=0; j<arr[i].size(); j++)
                {
                    if(k==0)
                        break;
                    else
                    {
                        ans[t]=arr[i].get(j);
                        t++;
                        k--;
                    }
                }
            }
            if(k==0)
                return ans;
        }

        return ans;
    }
}

CODE 2:

class Solution 
{
    public int[] topKFrequent(int[] nums, int k) 
    {
        int [] ans = new int[k];
        HashMap <Integer,Integer> map =new HashMap<>();

        for(int i:nums)
            map.put(i,map.getOrDefault(i,0)+1);
        
        List<Integer> l = new ArrayList<>(map.keySet());
        Collections.sort(l, (a, b) -> map.get(b) - map.get(a));
        
        for (int i = 0; i < k; i++) 
            ans[i] = l.get(i);
        
    return ans;
    }
}
