Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".
Example 1:
Input: strs = ["flower","flow","flight"]
Output: "fl"

CODE 1:

class Solution 
{
    public String longestCommonPrefix(String[] strs) 
    {
        if (strs == null || strs.length == 0)
            return "";
            
        StringBuffer st = new StringBuffer();
        Arrays.sort(strs);
        String l=strs[0];
        String r=strs[strs.length -1];
        int len = Math.min(l.length(), r.length());

        for(int i=0; i<len; i++)
        {
            if(l.charAt(i)==r.charAt(i))
                st.append(l.charAt(i));
            else
                return st.toString();
        }
        return st.toString();
    }
}

CODE 2:

class Solution {
    public String longestCommonPrefix(String[] strs) 
    {
      if (strs == null || strs.length == 0)
        return "";

      String ans=new String("");
      Arrays.sort(strs);
      String r=strs[0];
      String l=strs[strs.length -1];
      int i=0;

      while(i<r.length())
      {
        if(r.charAt(i)==l.charAt(i))
        {
          char ch = r.charAt(i);
           ans=ans+ch;
           i++;   
        }
        else
          break;
      }
      if(i==0)
        return "";
      return ans;
    }
}

CODE 3:

class Solution 
{
    public String longestCommonPrefix(String[] strs) 
    {
        if(strs.length==0)
            return "";

        boolean h=true;
        int len=0;

        for(int i=0; i< strs[0].length(); i++)
        {
            char ch=strs[0].charAt(i);
            for(int j=1; j<strs.length; j++)
            {
                if(i>=strs[j].length() || ch!= strs[j].charAt(i))
                {
                    h=false;
                    break;
                }
            }
            if(h==true)
                len++;
        }

        String ans="";
        for(int i=0; i<len; i++)
            ans+=strs[0].charAt(i);

        return ans;
    }
}
