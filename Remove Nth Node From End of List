Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

CODE 1:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode removeNthFromEnd(ListNode head, int n) 
    {
      ListNode p=head, q=p;
      int no=0;

      while(p!=null)
      {
        p=p.next;
        no++;
      }
      
      if (no == 1 && n == 1) 
      {
            head = null;
            return head;
      }
      if(n==no)
      {
        head=head.next;
        return head;
      }
      
      p=head;      
      while(no!=n )
      {
        p=p.next;
        no--;
      }

      while(q.next!=p)
       q=q.next;
      
      q.next=p.next;
      p.next=null;

      return head;  
    }
}

CODE 2:

class Solution 
{
    public ListNode removeNthFromEnd(ListNode head, int k) 
    {
        if(head==null || k==0 || head.next==null && k==1)
            return null;
        
        int n=0;
        ListNode temp=head;

        while(temp!=null)
        {
            temp=temp.next;
            n++;
        }

        if(n==k)
        {
            head=head.next;
            return head;
        }

        temp=head;
        for(int i=1; i<n-k; i++)
            temp=temp.next;

        temp.next=temp.next.next;
        return head;
    }
}
