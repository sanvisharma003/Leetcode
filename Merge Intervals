Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

CODE:

class Solution 
{
    public int[][] merge(int[][] intervals) 
    {
      List<int[]> result = new ArrayList<>();
      int n = intervals.length;
        
      if(n==0 || intervals == null) 
        return intervals;

      Arrays.sort(intervals, (a,b) -> (a[0]-b[0]));
		
      int[]temp = intervals[0];
      for(int i=1;i<n;i++)
      {
        if(intervals[i][0]<=temp[1])
        {
          temp[1] = Math.max(intervals[i][1], temp[1]);
          temp[0] = Math.min(intervals[i][0], temp[0]);
        }
			
			  else
        {
          result.add(temp);
          temp = intervals[i];
        }
      }

      result.add(temp);
      return result.toArray(new int[result.size()][2]);
    }
}
