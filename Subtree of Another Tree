Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise. A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true

CODE:

class Solution 
{
    public boolean isSubtree(TreeNode root, TreeNode sub) 
    {
        if (root == null)
            return sub == null;  

        if (isSameTree(root, sub)) 
            return true;  
        
        return isSubtree(root.left, sub) || isSubtree(root.right, sub);
    }

    private boolean isSameTree(TreeNode t1, TreeNode t2) 
    {
        if (t1 == null && t2 == null) 
            return true;  
        
        if (t1 == null || t2 == null) 
            return false; 
        
        return (t1.val == t2.val) && isSameTree(t1.left, t2.left) && isSameTree(t1.right, t2.right);
    }
}

