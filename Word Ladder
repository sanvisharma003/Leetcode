A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter. 
Every si for 1 <= i <= k is in wordList.
Note that beginWord does not need to be in wordList. sk == endWord. 
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Example 1:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

CODE:

class Solution 
{
    public int ladderLength(String beg, String end, List<String> lis) 
    {
      Set<String>set=new HashSet<>(lis);

      if(!set.contains(end))
        return 0;

      Set<String>vis=new HashSet<>();
      Queue<String>qu=new LinkedList<>();

      qu.add(beg);  
      int ans=1;

      while(!qu.isEmpty())
      {
        int n=qu.size();

        for(int i=0;i<n;i++)
        {
          String word=qu.remove();
          if(word.equals(end))
            return ans;

          for(int j=0;j<word.length();j++)
          {
            for(char k='a';k<='z';k++)
            {
              char[]arr=word.toCharArray();
              arr[j]=k;

              String st=new String(arr);
              if(set.contains(st) && !vis.contains(st))
              {
                qu.add(st);
                vis.add(st);
              }
            }
          }  
        }
        ans++;
      }
      return 0;
    }
}
