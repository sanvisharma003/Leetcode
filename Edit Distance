Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character

Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

CODE:

class Solution 
{
    public int minDistance(String s, String t) 
    {
      int n=s.length();
      int m=t.length();
      int[][]dp=new int[m+1][n+1];
        dp[0][0]=0;

      for(int i=1;i<=n;i++)
        dp[0][i]=i;

      for(int i=0;i<=m;i++)
        dp[i][0]=i;      

      for(int i=1;i<=m;i++)
      {
        for(int j=1;j<=n;j++)
        {
          if(t.charAt(i-1)==s.charAt(j-1))
            dp[i][j]=dp[i-1][j-1];
          
          else
          {
            int temp=Math.min(dp[i-1][j] , dp[i][j-1]);
            dp[i][j]=1+Math.min(temp, dp[i-1][j-1]);
          }
        }
      }

      return dp[m][n];
    }
}
