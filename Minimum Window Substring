Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "". The testcases will be generated such that the answer is unique.

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

CODE:

class Solution 
{
    public String minWindow(String s, String t) 
    {
      if(t.length() > s.length())
        return "";
        
      HashMap<Character,Integer>mp1=new HashMap<>();  //for t
      HashMap<Character,Integer>mp2=new HashMap<>();
      int mct=0, dct=t.length();
      String ans="";

      for(int i=0; i<t.length(); i++) 
      {
        char ch= t.charAt(i);
        mp1.put(ch, mp1.getOrDefault(ch,0)+1); 
      }
      
      int i=-1, j=-1;

      while(true)
      {
        boolean f1=false;
        boolean f2=false;

        //to acquite in string
        while(i<s.length()-1 && mct<dct)
        { 
          i++;   
          char ch=s.charAt(i);
          mp2.put(ch,mp2.getOrDefault(ch,0)+1);

          if(mp2.getOrDefault(ch,0) <= mp1.getOrDefault(ch,0))
            mct++;

          f1=true;  
        }

        //to collect ans and then release from the string
        while(j<i && mct==dct)
        {  
          String pans=s.substring(j+1,i+1);     //potential answer

          if(ans.length()==0 || pans.length()<ans.length())
            ans=pans;
          
          j++;
          char ch=s.charAt(j);

          if(mp2.get(ch)==1)
            mp2.remove(ch);
          else
            mp2.put(ch,mp2.get(ch)-1);

          if(mp2.getOrDefault(ch,0) < mp1.getOrDefault(ch,0))
            mct--;
          
          f2=true;  
        }

        if(f1==false && f2==false)
          break;
      }

      return ans;
    }
}
