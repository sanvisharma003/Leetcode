Problem statement
You are given an array/list of ‘N’ integers. You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.

Note:
A subsequence of an array/list is obtained by deleting some number of elements (can be zero) from the array/list, leaving the remaining elements in their original order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 500
1 <= N <= 1000
0 <= ARR[i] <= 10^5

Where 'ARR[i]' denotes the 'i-th' element in the array/list.

Time Limit: 1 sec.
Sample Input 1:
2
3
1 2 4
4
2 1 4 9
Sample Output 1:
5
11
Explanation to Sample Output 1:
In test case 1, the sum of 'ARR[0]' & 'ARR[2]' is 5 which is greater than 'ARR[1]' which is 2 so the answer is 5.
In test case 2, the sum of 'ARR[0]' and 'ARR[2]' is 6, the sum of 'ARR[1]' and 'ARR[3]' is 10, and the sum of 'ARR[0]' and 'ARR[3]' is 11. So if we take the sum of 'ARR[0]' and 'ARR[3]', it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.

CODE:

import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution 
{
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) 
	{
		if(nums.size()==1)
			return nums.get(0);
		if(nums.size()==2)
			return Math.max(nums.get(0), nums.get(1));

		int[]arr= new int[nums.size()];
		Arrays.fill(arr, -1);

		return find(arr,nums,0);
	}

	public static int find(int[]arr, ArrayList<Integer> al, int i)
	{
		if(i>=al.size())
			return 0;

        if (arr[i]!=-1) 
            return arr[i];
			
		int l= al.get(i)+find(arr,al,i+2);
		int r=find(arr,al,i+1);
		arr[i]=Math.max(l,r);

		return arr[i];
	}
}
