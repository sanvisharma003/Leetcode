Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s. Return the number of closed islands.
Example 1:

Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: Islands in gray are closed because they are completely surrounded by water (group of 1s).

CODE:

class Solution 
{
    public int closedIsland(int[][] grid) 
    {
      int ans=0;

      for(int i=0;i<grid.length;i++)
      {
        for(int j=0;j<grid[0].length;j++)
        {
          if(i==0)
            bound(grid,i,j);

          if(j==0)
            bound(grid,i,j);
          
          if(i==grid.length-1)
            bound(grid,i,j);
          
          if(j==grid[0].length-1)
            bound(grid,i,j);
        }
      }

      for(int i=0;i<grid.length;i++)
      {
        for(int j=0;j<grid[0].length;j++)
        {
          if(grid[i][j]==0)
          {
            bound(grid,i,j);
            ans++;
          }
        }
      }
      return ans;
    }

    void bound(int[][]grid, int i, int j)
    {
      if(i==-1 ||i==grid.length ||j==-1 ||j==grid[0].length)
        return;

      if(grid[i][j]==1)
        return;  

      grid[i][j]=1;
      bound(grid,i+1,j);
      bound(grid,i-1,j);
      bound(grid,i,j+1);
      bound(grid,i,j-1);
    }    
}
