Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
Example 1:
Input: x = 123
Output: 321

CODE 1:

class Solution 
{
    public int reverse(int x) 
    {
      int neg=0;
      double ans=0;
      if(x<0)
      {
        neg=1;
        x=(-x);
      }
      int count=check(x) -1;           
      
        while(x>0)
        {
          int n=x%10;         
          ans=ans+((Math.pow(10,count))*n);
          x=x/10;
          count--;                
        }
        
        if(ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE)
            return 0;
            
        if(neg!=0)
           ans=(-ans);

        return (int)ans; 
    }

    public int check(int x)
    {
      int count=0;
      while(x>0)
      {
        count++;
        x=x/10;
      }
      return count;
    }
}

CODE 2:

class Solution 
{
    public int reverse(int x) 
    {
        if(x>=Integer.MAX_VALUE || x<=Integer.MIN_VALUE || x==0)
            return 0;

        int ans=0, i=0, neg=0;
        StringBuilder sb=new StringBuilder();

        if(x<0)
        {
            x=-(x);
            neg++;
        }

        while(x>0)
        {
            sb.append(x%10);
            x=x/10;
        }
                
        Long temp= Long. parseLong(sb.toString());

        if(temp>2147483647)
            return 0;
        
        ans=temp.intValue();

        if(neg==1)
            ans=-(ans);

        return ans;
    }
}
