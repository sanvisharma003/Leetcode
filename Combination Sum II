Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: [[1,1,6],[1,2,5],[1,7],[2,6]]

CODE:

class Solution 
{
    public List<List<Integer>> combinationSum2(int[] candidates, int target) 
    {
        List<List<Integer>> result = new ArrayList<>();

        if (candidates == null || candidates.length == 0) 
          return result;

        Arrays.sort(candidates);

        com(candidates, 0, target, new ArrayList<>(), result);
        return result;
    }

    private void com(int[] candidates, int start, int target, List<Integer> tempList, List<List<Integer>> result) 
    {
        if (target == 0) 
        {
            result.add(new ArrayList<>(tempList));
            return;
        }

        for (int i = start; i < candidates.length; i++) 
        {   
            if (i > start && candidates[i - 1] == candidates[i]) 
                continue;
            
            if (candidates[i] > target) 
                break;
            
            tempList.add(candidates[i]);
            com(candidates, i + 1, target - candidates[i], tempList, result);
            tempList.remove(tempList.size() - 1);
        }
    }
}
