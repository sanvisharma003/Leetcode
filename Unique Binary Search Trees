Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

Example 1:
Input: n = 3
Output: 5

CODE 1:

class Solution 
{
    public int numTrees(int n) 
    {
        if(n<=1)
          return 1;

        int[]arr=new int[n+1];
        arr[0]=1;
        arr[1]=1;
                
        return cal(arr,n);
    }

    int cal(int[]arr, int n)
    {
      if(n<=1)
        return 1;

      if(arr[n]!=0)
        return arr[n];

        int ans=0;
      for(int i=1;i<=n;i++)
        ans+=(cal(arr,i-1) * cal(arr,n-i));
        
      arr[n]=ans;
      return arr[n];
    }
}

CODE 2:

class Solution 
{
    public int numTrees(int n) 
    {
        if(n<=1)
          return 1;

        int ans=0;

        for(int i=1;i<=n;i++)
          ans= ans+ (numTrees(i-1) * numTrees(n-i));
          
        return ans;
    }
}
