You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

CODE 1:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution 
{
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        int carr=0;
        ListNode head=null;
        ListNode p=head;

        while(l1!=null && l2!=null)
        {
            int n=l1.val+l2.val;

            if(carr!=0)
                n+=carr;
            
            int dig=n%10;
            carr=n/10;

            ListNode nn=new ListNode();
            nn.val=dig;

            if(head==null)
            {
                head=nn;
                p=head;
            }
            else
            {
                p.next=nn;
                p=p.next;
            }
            l1=l1.next;
            l2=l2.next;
        }

        while(l1!=null)
        {
            int n=l1.val;

            if(carr!=0)
                n+=carr;
            
            int dig=n%10;
            carr=n/10;

            ListNode nn=new ListNode();
                nn.val=dig;

            p.next=nn;
                p=p.next;

            l1=l1.next;
        }

        while(l2!=null)
        {
            int n=l2.val;

            if(carr!=0)
                n+=carr;
            
            int dig=n%10;
            carr=n/10;

            ListNode nn=new ListNode();
                nn.val=dig;

            p.next=nn;
                p=p.next;

            l2=l2.next;
        }

        if(carr!=0)
        {
            ListNode nn=new ListNode();
            nn.val=carr;

            p.next=nn;
        }
        return head;
    }
}

CODE 2:

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {  
      ListNode dummy = new ListNode(0); 
        ListNode curr = dummy; 
        int carry = 0; 
        while(l1 != null || l2 != null || carry == 1){
            int sum = 0; 
            if(l1 != null)
            { 
                sum += l1.val;
                l1 = l1.next;
            }
            if(l2 != null)
            { 
                sum += l2.val;
                l2 = l2.next;
            }
            sum += carry; 
            carry = sum/10; 
            ListNode node = new ListNode(sum % 10); 
            curr.next = node; 
            curr = curr.next; 
        }
        return dummy.next; 
    }
}
