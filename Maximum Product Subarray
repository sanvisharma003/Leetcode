Given an integer array nums, find a subarray that has the largest product, and return the product. The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

CODE 1:

class Solution 
{
    public int maxProduct(int[] nums) 
    {   
       int ans=-(Integer.MAX_VALUE);  
       
       for(int i=0;i<nums.length;i++)
       {
         int pro=1;
         for(int j=i;j<nums.length;j++)
         {
             pro*=nums[j];
             ans=Math.max(ans,pro);
           }
         }
       
       return ans;
    }
}

CODE 2:

class Solution 
{
   public int maxProduct(int[] nums) 
   {
       int maxPro=nums[0];
       int minPro=nums[0];
       int answer = nums[0];

       for(int i =1; i<nums.length; i++)
       {
           if(nums[i]<0)
           {        
               int temp=maxPro;
               maxPro=minPro;
               minPro=temp;  
           } 
            maxPro= Math.max( maxPro*nums[i],   nums[i]); 
            minPro= Math.min( minPro*nums[i], nums[i]);            
            answer=Math.max(answer, maxPro);            
       }     
       return answer;
   }
}

CODE3:

class Solution 
{
    public int maxProduct(int[] nums) 
    {
       
       int ans=-(Integer.MAX_VALUE);  
       
       for(int i=0;i<nums.length;i++)
       {
         for(int j=0;j<nums.length;j++)
         {
           int pro=1;
           for(int k=i;k<=j;k++)
           {
             pro*=nums[k];
             ans=Math.max(ans,pro);
           }
         }
       }
       return ans;
    }
}
