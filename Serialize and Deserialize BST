Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. The encoded string should be as compact as possible.

Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

CODE:

public class Codec 
{
    public void preorder(TreeNode root, StringBuilder sb) 
    {
        if (root == null) 
        {
            sb.append("n" + "/");
            return;
        }

        sb.append(root.val + "/");
        preorder(root.left, sb);
        preorder(root.right, sb);
    }

    public String serialize(TreeNode root) 
    {
        StringBuilder sb = new StringBuilder("");
        preorder(root, sb);

        return sb.toString();
    }

    public TreeNode constructTree(String preorder[], int index[], int end) 
    {
        if (index[0] > end) 
          return null;

        if (preorder[index[0]].equals("n")) 
        {
            index[0] += 1;
            return null;
        }

        TreeNode root = new TreeNode(Integer.parseInt(preorder[index[0]]));
        index[0] += 1;

        root.left = constructTree(preorder, index, end);
        root.right = constructTree(preorder, index, end);

        return root;
    }

    public TreeNode deserialize(String data) 
    {
        String preorder[] = data.split("/");
        TreeNode root = constructTree(preorder, new int[1], preorder.length - 1);
        return root;
    }
}
