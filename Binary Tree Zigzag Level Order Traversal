Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

CODE:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
    {
      List<List<Integer>>ans=new ArrayList<>();

      if(root==null)
        return ans;      
      
      Queue<TreeNode>st=new LinkedList<>();
      List<Integer>temp1=new ArrayList<>();
      int flag=1;

      st.add(root);
      temp1.add(root.val);
      ans.add(new ArrayList(temp1));

      while(!st.isEmpty())
      {
        List<Integer>temp=new ArrayList<>();
        int si=st.size();

        while(si-->0)
        {
          root=st.remove();

          if(root.right!=null)
          {
            temp.add(root.right.val);
            st.add(root.right);
          }

          if(root.left!=null)
          {
            temp.add(root.left.val);
            st.add(root.left);
          }        
        }

        flag++;

        if(flag%2!=0)
          Collections.reverse(temp);

        ans.add(new ArrayList(temp));
      }
      ans.remove(ans.size()-1);

      return ans;
    }
}
