Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

CODE:

class Solution 
{
    public String removeKdigits(String s, int k) 
    {
        if (k >= s.length())
            return "0";

        Stack<Integer> st = new Stack<>();
        int i = 0;

        for (i = 0; i < s.length(); i++) 
        {
            int temp = s.charAt(i) - '0';

            while (!st.isEmpty() && k > 0 && st.peek() > temp) 
            {
                st.pop();
                k--;
            }
            st.push(temp);
        }

        while (k > 0 && !st.isEmpty()) 
        {
            st.pop();
            k--;
        }

        StringBuilder sb = new StringBuilder();
        while (!st.isEmpty()) 
            sb.insert(0, st.pop());

        while (sb.length() > 0 && sb.charAt(0) == '0') 
            sb.deleteCharAt(0);

        while (i < s.length()) 
        {
            sb.append(s.charAt(i));
            i++;
        }

        return sb.length() == 0 ? "0" : sb.toString();
    }
}
