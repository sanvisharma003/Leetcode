Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

CODE:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public int kthSmallest(TreeNode root, int k) 
    {
      if(root.left==null && root.right==null)
        return root.val;

      List<Integer> ans=new ArrayList<>();
      Stack<TreeNode>st=new Stack<>();

      TreeNode curr=root;
      while(curr!=null || !st.isEmpty())
      {
        if(curr!=null)
        {
          st.push(curr);
          curr=curr.left;
        }

        else
        {
          curr=st.pop();
          ans.add(curr.val);
          curr=curr.right;
        }
      }
      
      for(int i=0;i<ans.size();i++)
      {
        if(i==k-1)
          return ans.get(i);
      }

      return 0;
    }
}
