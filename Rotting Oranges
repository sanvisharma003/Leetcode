You are given an m x n grid where each cell can have one of three values:
0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

CODE:

class Solution 
{
    public int orangesRotting(int[][] grid) 
    {
      int fr=0, time=-1, tot=0;
      Queue<Pair>qu=new LinkedList<>();

      for(int i=0;i<grid.length;i++)
      {
        for(int j=0;j<grid[0].length;j++)
        {
          if(grid[i][j]==1)
            fr++;

          if(grid[i][j]==2)
            qu.add(new Pair(i,j));
        }
      } 
      
      if(fr==0)
        return 0;

      while(!qu.isEmpty())
      {
        int si=qu.size();
        time++;

        for(int k=0;k<si;k++)
        {
          Pair<Integer, Integer>p = qu.remove();
          int i=p.getKey();
          int j=p.getValue();
          int cn=0;

          if(i>0 && grid[i-1][j]==1)
          {
            grid[i-1][j]=2;
            qu.add(new Pair(i-1,j));
            fr--;
          }

          if(j-1>=0 && grid[i][j-1]==1)
          {
            grid[i][j-1]=2;
            qu.add(new Pair(i,j-1));
            fr--;
          }

          if(i+1!=grid.length && grid[i+1][j]==1)
          {
            grid[i+1][j]=2;
            qu.add(new Pair(i+1,j));
            fr--;
          }

          if(j+1!=grid[0].length && grid[i][j+1]==1)
          {
            grid[i][j+1]=2;
            qu.add(new Pair(i,j+1));
            fr--;
          }
        }
      }

      if(fr!=0)
        return -1;

      return time;
    }
}
