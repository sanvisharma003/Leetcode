Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number. You must solve the problem without modifying the array nums and uses only constant extra space.
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

CODE 1:
class Solution {
    public int findDuplicate(int[] nums) 
    {
        int f=0, s=0;
        do
        {
            s=nums[s];
            f=nums[nums[f]];
        }while(f!=s);

        s=0;
        do
        {
            s=nums[s];
            f=nums[f];
        }while(s!=f);

        return s;
    }
}

CODE 2:
class Solution {
    public int findDuplicate(int[] nums) 
    {
      Arrays.sort(nums);
      {
        for(int i=0;i<nums.length-1;i++)
        {
          if(nums[i]==nums[i+1])
            return nums[i];
        }
        return -1;
      }
    }
}

CODE 3:
class Solution {
    public int findDuplicate(int[] nums) 
    {
      HashMap <Integer, Integer> map=new HashMap<>(); 
      for(int i=0;i<nums.length;i++) 
      {
        if(map.containsKey(nums[i]))
        {
          return nums[i];
        }
        else
          map.put(nums[i],1);
      }
      return -1;
    }
}

CODE 4:
class Solution {
    public int findDuplicate(int[] nums) 
    {
        HashSet<Integer>st=new HashSet<>();
        for(int i=0;i<nums.length; i++)
        {
            if(st.contains(nums[i]))
                return nums[i];
            st.add(nums[i]);
        }  
        return 0;
    }
}
