Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

CODE:

class Solution 
{
  public int longestOnes(int[] nums, int k) 
  {
    int j=0, zcnt=0, len=0; 

    for(int i=0; i<nums.length; i++)
    {
      if(nums[i]==0 && zcnt<=k)
        zcnt++;

      if(zcnt>k)
      {  
        while(zcnt!=k)
        {
          if(nums[j]==0)
            zcnt--;

          j++;
        }
      }

      len=Math.max(len, i-j+1);
    }

    return len;
  }
}
