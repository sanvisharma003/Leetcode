Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

CODE 1:

class Solution {
    public int searchInsert(int[] nums, int target) 
    {
      int i=0;
      int j=nums.length-1;

      while(i<=j)
      {
        int mid=(i+j)/2;
       
        if(nums[mid]==target)
          return mid;
        else if(nums[mid]<target)
          i=mid+1;
        else
          j=mid-1;        
      } 
      
      return i;
    }
}

CODE 2:

class Solution 
{
    public int searchInsert(int[] nums, int target) 
    {
        int ans=search(nums,target,0,nums.length-1);
        return ans;
    }

    int search(int[]nums, int tar, int st, int en)
    {
        if(st>en)
            return st;

        if(en>=st)
        {
            int mid=(st+en)/2;

            if(tar==nums[mid])
                return mid;

            else if(tar>nums[mid])
                return search(nums, tar, mid+1, en);

            else
                return search(nums,tar,st,mid-1); 
        }
        return -1;
    }
}
