Given an array of integers nums, sort the array in ascending order and return it. You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

CODE:

class Solution 
{
    public int[] sortArray(int[] nums) 
    {
        mergesort(nums,0,nums.length-1);
        return nums;
    }
    private void mergesort(int[] arr, int l, int h)
    {
        if(l<h)
        {
            int mid = (l+h)/2;
            mergesort(arr, l, mid);
            mergesort(arr, mid+1, h);
            merge(arr, l, mid, h);
        }
    }
    private static void merge(int[] arr, int l, int m, int h) 
    {
        int[] temp = new int[h - l + 1];
        int i = l, j = m + 1, k = 0;

        while (i <= m && j <= h) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }

        while (i <= m) 
            temp[k++] = arr[i++];

        while (j <= h) 
            temp[k++] = arr[j++];

        for (int o = 0; o < temp.length; o++) 
            arr[l + o] = temp[o];
    }
}

    
