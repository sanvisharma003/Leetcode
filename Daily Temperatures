Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

Example 1:
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

CODE 1:

class Solution 
{
    public int[] dailyTemperatures(int[] temperatures) 
    {
        int[] result = new int[temperatures.length];
        int hottest = 0;

        for(int i = temperatures.length - 1; i >= 0; i--) 
        {
            if(temperatures[i] >= hottest) 
            {
                hottest = temperatures[i];
                continue;
            }

            int days = 1;
            while(temperatures[i+days] <= temperatures[i]) 
                days = days + result[i+days];
            
            result[i] = days;
        }
        return result;
    }
}

CODE 2:

class Solution 
{
    public int[] dailyTemperatures(int[] temperatures) 
    {
        int n=temperatures.length;
        int []ans=new int[n];
        Stack<Integer>st=new Stack<>();

        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty() && temperatures[st.peek()]<temperatures[i])
                ans[st.peek()]=i-st.pop();
            
            st.push(i);
        }
        
        return ans;
    }
}

CODE 3:

class Solution 
{
    public int[] dailyTemperatures(int[] temperatures) 
    {
        int n=temperatures.length;
        int []ans=new int[n];
        int max=0, ind=0;
        
        for(int i=n-1; i>=0; i--)
        {
            int z=i+1;
            while(z<n && temperatures[z]<=temperatures[i])
                z++;

            if(z==n)
                ans[i]=0;
            else
                ans[i]=z-i;
        }
        return ans;
    }
}

CODE 4:

class Solution 
{
    public int[] dailyTemperatures(int[] temperatures) 
    {
        int[]ans= new int[temperatures.length];
        Stack<Integer>st =new Stack<>();
        Stack<Integer>st2 =new Stack<>();

        for(int i=temperatures.length-1; i>=0; i--)
        {
            int temp=1;
            while(!st.isEmpty() && st.peek()<=temperatures[i])
            {
                st2.push(st.pop());
                temp++;
            }
            if(st.isEmpty())
                ans[i]=0;
            
            else
                ans[i]=temp;
            
            while(!st2.isEmpty())
                st.push(st2.pop());
            
            st.push(temperatures[i]);
        }
        return ans;
    }
}
