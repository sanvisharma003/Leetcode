A parentheses string is valid if and only if:
It is the empty string, 
It can be written as AB (A concatenated with B), where A and B are valid strings, or 
It can be written as (A), where A is a valid string. 
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string. 
For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))". Return the minimum number of moves required to make s valid.

Example 1:
Input: s = "())"
Output: 1

CODE:

class Solution 
{
    public int minAddToMakeValid(String s) 
    {
        if(s.length()==0)
            return 0;
        
        Stack<Character>st=new Stack<>();
        int ans=0;

        for(int i=0; i<s.length(); i++)
        {
            if(s.charAt(i)=='(')
                st.push(s.charAt(i));
            
            else if(!st.isEmpty() && s.charAt(i)==')')
                st.pop();

            else if(st.isEmpty())
                ans++;
        }
        if(!st.isEmpty())
        ans+=st.size();

        return ans;
    }
}
