Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

CODE:

class Solution 
{
    public int minSubArrayLen(int target, int[] nums) 
    {
        int start = 0, n = nums.length, min = Integer.MAX_VALUE, sum = 0;
        
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            while(sum >= target)
            {
                min = Math.min(min, i + 1 - start);
                sum -= nums[start++];
            }
        }
        if(min > n)
            return 0;
        return min;
    }
}

CODE:

class Solution {
    public int minSubArrayLen(int target, int[] nums) 
    {
      int sum=0, size=Integer.MAX_VALUE, j=0;

      for(int i=0;i<nums.length;i++)
      {
        sum+=nums[i];
        while(sum>=target)
        {
          sum-=nums[j];
          size=Math.min(size,i-j+1);
          j++;
        }
        System.out.print(size);
        System.out.println(sum);
      }

      if(size>nums.length)
        return 0;

      return size; 
    }
}
