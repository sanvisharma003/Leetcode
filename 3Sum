Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

CODE 1: (TLE)

class Solution 
{
    public List<List<Integer>> threeSum(int[] nums) 
    {
        Set<List<Integer>>ans=new HashSet<>();
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    if(nums[i]+nums[j]+nums[k]==0)
                    {
                        List<Integer>temp=new ArrayList<>();

                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);

                        Collections.sort(temp);
                        ans.add(temp); 
                    } 
                }   
            }    
        }
        return new ArrayList<>(ans);
    }
}

CODE 2:

class Solution 
{
    public List<List<Integer>> threeSum(int[] nums) 
    {
        Set<List<Integer>>ans=new HashSet<>();
                
        for(int i=0;i<nums.length;i++)
        {
            int j=i+1;
            Set<Integer>mp=new HashSet<>();

            while(j<nums.length)
            {
                List<Integer>temp=new ArrayList<>();

                if(mp.contains(-(nums[i]+nums[j])))
                {
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(-(nums[i]+nums[j]));

                    Collections.sort(temp);
                    ans.add(temp);
                }
                else
                    mp.add(nums[j]);

                j++;
            }    
        }
        return new ArrayList<>(ans);
    }
}

CODE 3:

class Solution 
{
    public List<List<Integer>> threeSum(int[] nums) 
    {
        Set<List<Integer>>ans=new HashSet<>();
        Arrays.sort(nums);

        for(int i=0;i<nums.length;i++)
        {
            int j=i+1, k=nums.length-1;

            while(j<k)
            {
                List<Integer>temp=new ArrayList<>();
                int sum=nums[j]+nums[k]+nums[i];

                if(sum==0)
                {
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    ans.add(temp);

                    j++;
                    k--;
                }
                else if(sum>0)
                    k--;

                else
                    j++;
            }
        }
        return new ArrayList<>(ans);
    }
}

CODE 4:

class Solution 
{
    public List<List<Integer>> threeSum(int[] nums) 
    {
        List<List<Integer>>ans=new ArrayList<>();
        Arrays.sort(nums);

        if(nums.length<3)
            return ans;

        for(int i=0; i<nums.length-1;i++)
        {
            if(nums[i]>0)
                break;

            if (i>0 && nums[i]==nums[i - 1]) 
                continue;
            
            int l=i+1;
            int r=nums.length-1;

            while(l<r)
            {
                int curr=nums[i]+nums[l]+nums[r];

                if(curr<0)
                    l++;
                else if(curr>0)
                    r--;
                else
                {
                    ans.add(Arrays.asList(nums[i], nums[l], nums[r]));
                    int lastLowOccurrence = nums[l];
                    int lastHighOccurrence = nums[r];
                    
                    while (l<r && nums[l] == lastLowOccurrence) 
                        l++;
                    
                    while (l<r && nums[r] == lastHighOccurrence) 
                        r--;
                }
            }
        }
        return ans;
    }
}
