Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n 
a, b, c, and d are distinct
nums[a] + nums[b] + nums[c] + nums[d] == target 
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

CODE:

class Solution 
{
    public List<List<Integer>> fourSum(int[] nums, int target) 
    {
        Set<List<Integer>>ans=new HashSet<>();
        Arrays.sort(nums);

        for(int i=0;i<nums.length-3;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
                continue;

            for(int j=i+1;j<nums.length;j++)
            {
                if(j>i+1 && nums[j]==nums[j-1])
                    continue;

                int k=j+1, l=nums.length-1;
                while(k<l)
                {
                    long sum=(long)nums[i]+(long)nums[j]+(long)nums[k]+(long)nums[l];

                    if(sum==target)
                    {
                        List<Integer>temp=new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);

                        ans.add(temp);
                        k++;
                        l--;
                    }

                    else if(sum>target)
                        l--;

                    else
                        k++;
                }
            }
        }
        return new ArrayList<>(ans);
    }
}
