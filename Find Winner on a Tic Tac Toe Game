Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:
Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending". You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

Example 1:
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

CODE:

class Solution 
{
    public String tictactoe(int[][] moves) 
    {
        char[][] temp=new char[3][3];

        for(int i=0;i<moves.length; i++)
        {
            int k=moves[i][0];
            int l=moves[i][1];

            if(i%2==0)
            {
                temp[k][l]='X';
                if(check(temp,'X')==1)
                    return "A";

                else 
                {
                    if(i==8)
                       return "Draw"; 
                }
            }

            else
            {
                temp[k][l]='O';
                if(check(temp,'O')==1)
                    return "B";
            }
        }
        return "Pending";
    }

    int check(char[][]board, char ch)
    {
        if((board[0][0]==board[0][1] && board[0][1]==board[0][2] && board[0][2]==ch) || (board[1][0]==board[1][1] && board[1][1]==board[1][2] && board[1][2]==ch) || (board[2][0]==board[2][1] && board[2][1]==board[2][2] && board[2][2]==ch) || (board[0][0]==board[1][0] && board[1][0]==board[2][0] && board[2][0]==ch) || (board[0][1]==board[1][1] && board[1][1]==board[2][1] && board[2][1]==ch) || (board[0][2]==board[1][2] && board[1][2]==board[2][2] && board[2][2]==ch) || (board[0][0]==board[1][1] && board[1][1]==board[2][2] && board[2][2]==ch) || (board[0][2]==board[1][1] && board[1][1]==board[2][0] && board[2][0]==ch))
            return 1;

        return 0;
        
    }
}
