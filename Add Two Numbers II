You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

CODE 1:

class Solution 
{
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        l1=rev(l1);
        l2=rev(l2);
        int carr = 0;
        ListNode p=null, head=null;

        while(l1!=null && l2!=null)
        {
            int temp= l1.val + l2.val +carr ;
            int v =temp%10;
            carr=temp/10;
            ListNode nn = new ListNode(v);

            if(head==null)
            {
                head=nn;
                p=head;
            }
            else
            {
                p.next=nn;
                p=p.next;
            }
            l1=l1.next;
            l2=l2.next;
        }

        while(l1!=null)
        {
            int temp= l1.val +carr ;
            int v =temp%10;
            carr=temp/10;

            ListNode nn = new ListNode(v);
            p.next=nn;
            p=p.next;
            
            l1=l1.next;
        }

        while(l2!=null)
        {
            int temp= l2.val +carr ;
            int v =temp%10;
            carr=temp/10;

            ListNode nn = new ListNode(v);
            p.next=nn;
            p=p.next;
            
            l2=l2.next;
        }

        if(carr!=0)
        {
            ListNode nn = new ListNode(carr);
            p.next=nn;
            p=p.next;
        }

        head=rev(head);
        return head;
    }

    private ListNode rev(ListNode head)
    {
        ListNode pre=null, curr=head, nxt=head;
        while(curr!=null)
        {
            nxt=curr.next;
            curr.next=pre;
            pre=curr;
            curr=nxt;
        }
        return pre;
    }
}

CODE 2:

import java.math.BigInteger;
class Solution 
{
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode p1=l1, p2=l2;
        String n1="", n2="";

        while(p1!=null)
        {
            n1+=p1.val+"";
            p1=p1.next;
        }

        while(p2!=null)
        {
            n2+=p2.val+"";
            p2=p2.next;
        }
        BigInteger no1=new BigInteger(n1);
        BigInteger no2=new BigInteger(n2);
       
        String ans=(no1.add(no2)).toString();
        ListNode head=null, p=null;

        int i=0;
        while(i<ans.length())
        {
            if(head==null)
            {
                ListNode ln=new ListNode();
                ln.next=null;
                ln.val=ans.charAt(i) -'0';
                head=ln;
                i++;
                p=head;
            }

            else
            {
                ListNode ln=new ListNode();
                ln.next=null;
                ln.val=ans.charAt(i) -'0';
                i++;
                p.next=ln;
                p=p.next;
            }
        }

        return head;
    }
}
