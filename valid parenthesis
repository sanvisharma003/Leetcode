Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if:Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

CODE:

class Solution {

  public static int compare(Character a, Character b)
  {
    if(a=='(' && b==')')
      return 1;
    else if(a=='{' && b=='}')
      return 1;
    else if(a=='[' && b==']')
      return 1;
    else
      return 0;
  }
  
    public boolean isValid(String s) {
        
        Stack<Character> st=new Stack<>();
        int i=0, ans, len=s.length();
        Character a;

        if(len==1)
          return false;

        while(i!=len)
        {
          if(s.charAt(i)=='(' || s.charAt(i)=='{' || s.charAt(i)=='[')
             st.push(s.charAt(i));
          
          else if(s.charAt(i)==')' || s.charAt(i)=='}' || s.charAt(i)==']')
          {
            if(st.empty())
              return false;
            a=st.pop();
            ans=compare(a,s.charAt(i));
            if(ans!=1)
              return false;
          }
          i++;
        }

        if(st.empty())
           return true;
        else
          return false;

        //return true;
    }
}
