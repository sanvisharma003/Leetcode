Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key. 
The right subtree of a node contains only nodes with keys greater than the node's key. 
Both the left and right subtrees must also be binary search trees.

Example 1:
Input: root = [2,1,3]
Output: true

CODE 1:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public boolean isValidBST(TreeNode root) 
    {
      

      List<Integer> ans=new ArrayList<>();
      Stack<TreeNode>st=new Stack<>();

      TreeNode curr=root;
      while(curr!=null || !st.isEmpty())
      {
        if(curr!=null)
        {
          st.push(curr);
          curr=curr.left;
        }

        else
        {
          curr=st.pop();
          ans.add(curr.val);
          curr=curr.right;
        }
      }

      for(int i=0;i<ans.size()-1;i++)
      {
        if(ans.get(i)>=ans.get(i+1))
          return false;
      }   
      return true;
    }
}

CODE 2:

class Solution 
{
    public boolean isValidBST(TreeNode root) 
    {
      return isValid(root, null, null);
    }

    boolean isValid(TreeNode root, Integer max, Integer min) 
    {
      if(root == null)
        return true;

      if((max!=null && root.val>=max) || (min!=null && root.val<=min)) 
        return false;

      return isValid(root.left,root.val,min) && isValid(root.right,max,root.val);
    }
}
