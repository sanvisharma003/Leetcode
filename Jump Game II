You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0]. Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 
0 <= j <= nums[i] and i + j < n 
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
 
Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

CODE 1:

class Solution 
{
    public int jump(int[] nums) 
    {
        if (nums.length <= 1) 
            return 0;

        int ans = 0, i=0;
        while(i<nums.length-1)
        {
            ans++;
            i=helper(nums,i);
        }
       
        return ans;
    }

    private int helper(int[]arr, int i)
    {
        int far=i+arr[i];

        if(far >= arr.length-1)
            return arr.length;
        
        int max=Integer.MIN_VALUE, ind=0;

        for(int j=i; j<=far; j++)
        {
            if(arr[j]+j>=max)
            {
                max=arr[j]+j;
                ind=j;
            }
        }
        return ind;
    }
}

CODE 2:

class Solution 
{
    public int jump(int[] nums) 
    {
        if (nums.length <= 1) 
            return 0;

        int jumps = 0, currentEnd = 0; 
        int farthest = 0;

        for (int i = 0; i < nums.length - 1; i++) 
        {
            // Update the farthest point that can be reached
            farthest = Math.max(farthest, i + nums[i]);
            
            // If we have reached the end of the current range
            if (i == currentEnd) 
            {
                jumps++;
                currentEnd = farthest;
                
                // If we have reached or passed the last index
                if (currentEnd >= nums.length - 1) 
                    break;
            }
        }
        
        return jumps;
    }
}
