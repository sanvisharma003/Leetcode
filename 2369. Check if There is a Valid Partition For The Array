You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays. We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:
The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

Example 1:
Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6]. This partition is valid, so we return true.

CODE:

class Solution 
{
    public boolean validPartition(int[] nums) 
    {
        if(nums.length==2)
          return nums[0]==nums[1];

        boolean valid[]=new boolean[nums.length+1];
        if(nums[0]==nums[1])
          valid[1]=true;

        if(nums[0]==nums[1] && nums[0]==nums[2] || nums[0]+1==nums[1] && nums[0]+2==nums[2])
          valid[2]=true;

       for(int i=3;i<nums.length;i++)
       {
          if(nums[i]==nums[i-1])
            valid[i]|=valid[i-2];

          if(nums[i]==nums[i-1] && nums[i-1]==nums[i-2])
            valid[i]|=valid[i-3];

          if (nums[i]-1==nums[i-1] && nums[i-1]-1==nums[i-2]) 
            valid[i]|=valid[i-3];
       }

       return valid[nums.length-1];
    }
}
