Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17.

CODE 1:

class Solution 
{
    public int sumSubarrayMins(int[] arr) 
    {
        int ans=0;
        for(int i=0; i<arr.length; i++)
        {
            int min=arr[i];
            for(int j=i; j<arr.length; j++)
            {
                if(arr[j]< min)
                    min=arr[j];

                ans+=min;
            }            
        }
        return ans;
    }
}

CODE 2:

class Solution 
{
    int mod = (int)1e9+7;
    public int sumSubarrayMins(int[] arr) 
    {
       long ans = 0,n = arr.length;
       Stack<Integer> st = new Stack<>();

       for(int i=0;i<=n;i++)
       {
           while(!st.isEmpty() && (i==n || arr[st.peek()]>arr[i]))
           {
               int mid = st.pop();
               int left = st.isEmpty() ? -1:st.peek();
               ans+= (long)((i-mid)*(mid-left)*(long)arr[mid]);
               ans%=mod;
           }
           st.push(i);
       } 
       return (int)ans;
    }
}
