Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'. A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

CODE:

class Solution 
 {
    public void solve(char[][] board) 
    {
        int n=board.length;
        int m=board[0].length;

        if(n<=1 && m<=1 )
          return;

        int[][]vis=new int[n][m];

        for(int i=0;i<n;i++)
        {
          if(board[i][0]=='O')
            dfs(board,vis,i,0);

          if(board[i][m-1]=='O')
            dfs(board,vis,i,m-1);
        }
       
        for(int i=0;i<m;i++)
        {
          if(board[0][i]=='O')
            dfs(board,vis,0,i);

          if(board[n-1][i]=='O')
            dfs(board,vis,n-1,i);
        }

        for(int i=0;i<n;i++)
        {
          for(int j=0;j<m;j++)
          {
            if(board[i][j]=='O' && vis[i][j]!=1)
              board[i][j]='X';
          }
        }
    }

    void dfs(char[][]arr, int[][]vis, int i, int j)
    {
      if(i==arr.length || i<0 || j<0 || j==arr[0].length)
        return;
      
      if(arr[i][j]=='O' && vis[i][j]==0)
      {
        vis[i][j]=1;

        dfs(arr,vis,i+1,j);
        dfs(arr,vis,i-1,j);
        dfs(arr,vis,i,j+1);
        dfs(arr,vis,i,j-1);
      }  
    }
}
