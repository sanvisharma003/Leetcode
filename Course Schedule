There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

CODE:

class Solution 
{
    public boolean canFinish(int num, int[][] arr) 
    {
      if(num<=0)
        return false;

      ArrayList<ArrayList<Integer>>adj = new ArrayList<>();
        for(int i=0;i<num;i++)
          adj.add(new ArrayList<>());
        
        for(int i=0;i<arr.length;i++)
            adj.get(arr[i][1]).add(arr[i][0]);
        
        int[] indegree = new int[num];
        for(int i=0;i<num;i++)
        {
            for(int it:adj.get(i))
                indegree[it]++;
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<num;i++)
        {
            if(indegree[i] == 0)
                q.add(i);
        }

        int[] topo = new int[num];
        int i = 0;
        while(!q.isEmpty())
        {
            int node = q.peek();
            q.remove();
            topo[i++] = node;

            for(int it:adj.get(node))
            {
                indegree[it]--;
                if(indegree[it] == 0)
                q.add(it);
            }
        }

        if(i == num)
          return true;

        return false;
    }
}
