Given the root of a binary tree, return the preorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Given the root of a binary tree, return the postorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

CODE:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 PREORDER:
 
class Solution {
    public void pre(TreeNode root, List ans)
    {
      if(root==null)
      {
        return ;
      }
      ans.add(root.val);
      System.out.print(ans);
      pre(root.left, ans);
      pre(root.right, ans);
    }
    public List<Integer> preorderTraversal(TreeNode root) 
    {
        List<Integer> ans=new ArrayList<>();
        if(root==null)
        {
          //ans.add(null);
          return ans;
        } 
        
        pre(root, ans);
        return ans;
    }
}


INORDER:

class Solution {
  public void in(TreeNode root, List ans)
  {
    if(root==null)
      return;

    in(root.left, ans);
    ans.add(root.val);
    in(root.right, ans);
  }
  
    public List<Integer> inorderTraversal(TreeNode root) 
    {
      List<Integer> ans=new ArrayList<>();
      if(root==null)
        return ans;

      in(root,ans);
      return ans;    
    }
}

POSTORDER:

class Solution {

  public void post(TreeNode root, List ans)
  {
    if(root==null)
      return;
    
    post(root.left, ans);
    post(root.right, ans);
    ans.add(root.val);
  }
  
    public List<Integer> postorderTraversal(TreeNode root) 
    {
      List <Integer> ans=new ArrayList<>();

      if(root==null)
         return ans;

      post(root, ans);
      return ans;  
    }
}
