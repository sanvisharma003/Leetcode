Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

CODE:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution 
{
    public List<List<Integer>> levelOrder(TreeNode root) 
    {
      List<List<Integer>>ans=new ArrayList<>();

      if(root==null)
        return ans;

      Queue<TreeNode>qu=new LinkedList<>();
      qu.add(root);

      while(!qu.isEmpty())
      {
        List<Integer>lev=new ArrayList<>();
        int si=qu.size();

        while(si>0)
        {
          TreeNode curr=qu.remove();

          lev.add(curr.val);

          if(curr.left!=null)
            qu.add(curr.left);

          if(curr.right!=null)
            qu.add(curr.right);

          si--;
        }

        ans.add(lev);  
      }
      
      return ans;
    }
}
