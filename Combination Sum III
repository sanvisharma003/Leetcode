Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
1) Only numbers 1 through 9 are used. 
2) Each number is used at most once. 
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation: 1 + 2 + 4 = 7 . There are no other valid combinations.

CODE:

class Solution 
{
    public List<List<Integer>> combinationSum3(int k, int n) 
    {
      List<List<Integer>> ans=new ArrayList<>();

      back(ans, new ArrayList<>(), k, n, 0, 1);

      return ans;  
    }

    public void back(List<List<Integer>>ans,List<Integer>temp,int k,int n,int cnt, int st)
    {
      if(n<0)
        return;

      if(cnt>k)
        return;

      if(cnt==k && n==0)
      {
        ans.add(new ArrayList(temp));
        return;
      }

      for(int i=st;i<=9;i++)
      {
        temp.add(i);
        back(ans, temp, k, n-i, cnt+1, i+1);
        temp.remove(temp.size()-1);
      }
    }
}
